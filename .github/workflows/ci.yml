# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Check formatting with black
        run: black --check --diff src app tests

      - name: Check import sorting with isort
        run: isort --check-only --diff src app tests

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 src app tests --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 src app tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Type check with mypy
        run: mypy src/earth

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        include:
          # Test on macOS and Windows with latest Python
          - os: macos-latest
            python-version: "3.11"
          - os: windows-latest
            python-version: "3.11"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests with pytest
        run: |
          pytest tests/ -v \
            --cov=src/earth \
            --cov=app \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=80

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

  test-install:
    name: Test Installation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        install-method: [wheel, source]
        extras: [none, companies, campaigns, automotive, all]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build package
        run: |
          python -m pip install --upgrade pip build
          python -m build

      - name: Test wheel installation
        if: matrix.install-method == 'wheel'
        run: |
          if [ "${{ matrix.extras }}" = "none" ]; then
            pip install dist/*.whl
          else
            pip install "dist/*.whl[${{ matrix.extras }}]"
          fi

      - name: Test source installation
        if: matrix.install-method == 'source'
        run: |
          if [ "${{ matrix.extras }}" = "none" ]; then
            pip install .
          else
            pip install ".[${{ matrix.extras }}]"
          fi

      - name: Test import
        run: |
          python -c "
          import earth
          print(f'Earth version: {earth.__version__}')

          # Test basic functionality
          from earth.generators.person import generate_person
          person = generate_person()
          print(f'Generated person: {person.first_name} {person.last_name}')

          # Test app import
          try:
            import app
            print('App import successful')
          except ImportError as e:
            print(f'App import failed: {e}')
          "

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install bandit
        run: pip install bandit[toml]

      - name: Run bandit security scan
        run: bandit -r src/ app/ -f json -o bandit-report.json || true

      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json
